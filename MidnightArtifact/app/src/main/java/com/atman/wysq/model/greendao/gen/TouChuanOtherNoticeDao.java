package com.atman.wysq.model.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.atman.wysq.model.bean.TouChuanOtherNotice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOU_CHUAN_OTHER_NOTICE".
*/
public class TouChuanOtherNoticeDao extends AbstractDao<TouChuanOtherNotice, Long> {

    public static final String TABLENAME = "TOU_CHUAN_OTHER_NOTICE";

    /**
     * Properties of entity TouChuanOtherNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoticeType = new Property(1, int.class, "noticeType", false, "NOTICE_TYPE");
        public final static Property DrawingImage = new Property(2, String.class, "drawingImage", false, "DRAWING_IMAGE");
        public final static Property Send_userId = new Property(3, long.class, "send_userId", false, "SEND_USER_ID");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property PropTouchY = new Property(5, int.class, "propTouchY", false, "PROP_TOUCH_Y");
        public final static Property PropTouchX = new Property(6, int.class, "propTouchX", false, "PROP_TOUCH_X");
        public final static Property GiftId = new Property(7, int.class, "giftId", false, "GIFT_ID");
        public final static Property GiftMessage = new Property(8, String.class, "giftMessage", false, "GIFT_MESSAGE");
        public final static Property Send_avatar = new Property(9, String.class, "send_avatar", false, "SEND_AVATAR");
        public final static Property Send_nickName = new Property(10, String.class, "send_nickName", false, "SEND_NICK_NAME");
        public final static Property ChangeBackImageIndex = new Property(11, int.class, "changeBackImageIndex", false, "CHANGE_BACK_IMAGE_INDEX");
        public final static Property Receive_userId = new Property(12, long.class, "receive_userId", false, "RECEIVE_USER_ID");
        public final static Property PropId = new Property(13, int.class, "propId", false, "PROP_ID");
        public final static Property CallType = new Property(14, int.class, "callType", false, "CALL_TYPE");
        public final static Property Receive_nickName = new Property(15, String.class, "receive_nickName", false, "RECEIVE_NICK_NAME");
        public final static Property PropMessage = new Property(16, String.class, "propMessage", false, "PROP_MESSAGE");
        public final static Property GrabType = new Property(17, int.class, "grabType", false, "GRAB_TYPE");
        public final static Property AddfriendType = new Property(18, int.class, "addfriendType", false, "ADDFRIEND_TYPE");
        public final static Property Receive_avatar = new Property(19, String.class, "receive_avatar", false, "RECEIVE_AVATAR");
        public final static Property IsRead = new Property(20, int.class, "isRead", false, "IS_READ");
        public final static Property IsEmbalmed = new Property(21, boolean.class, "isEmbalmed", false, "IS_EMBALMED");
    }


    public TouChuanOtherNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public TouChuanOtherNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOU_CHUAN_OTHER_NOTICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOTICE_TYPE\" INTEGER NOT NULL ," + // 1: noticeType
                "\"DRAWING_IMAGE\" TEXT," + // 2: drawingImage
                "\"SEND_USER_ID\" INTEGER NOT NULL ," + // 3: send_userId
                "\"TIME\" TEXT," + // 4: time
                "\"PROP_TOUCH_Y\" INTEGER NOT NULL ," + // 5: propTouchY
                "\"PROP_TOUCH_X\" INTEGER NOT NULL ," + // 6: propTouchX
                "\"GIFT_ID\" INTEGER NOT NULL ," + // 7: giftId
                "\"GIFT_MESSAGE\" TEXT," + // 8: giftMessage
                "\"SEND_AVATAR\" TEXT," + // 9: send_avatar
                "\"SEND_NICK_NAME\" TEXT," + // 10: send_nickName
                "\"CHANGE_BACK_IMAGE_INDEX\" INTEGER NOT NULL ," + // 11: changeBackImageIndex
                "\"RECEIVE_USER_ID\" INTEGER NOT NULL ," + // 12: receive_userId
                "\"PROP_ID\" INTEGER NOT NULL ," + // 13: propId
                "\"CALL_TYPE\" INTEGER NOT NULL ," + // 14: callType
                "\"RECEIVE_NICK_NAME\" TEXT," + // 15: receive_nickName
                "\"PROP_MESSAGE\" TEXT," + // 16: propMessage
                "\"GRAB_TYPE\" INTEGER NOT NULL ," + // 17: grabType
                "\"ADDFRIEND_TYPE\" INTEGER NOT NULL ," + // 18: addfriendType
                "\"RECEIVE_AVATAR\" TEXT," + // 19: receive_avatar
                "\"IS_READ\" INTEGER NOT NULL ," + // 20: isRead
                "\"IS_EMBALMED\" INTEGER NOT NULL );"); // 21: isEmbalmed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOU_CHUAN_OTHER_NOTICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TouChuanOtherNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNoticeType());
 
        String drawingImage = entity.getDrawingImage();
        if (drawingImage != null) {
            stmt.bindString(3, drawingImage);
        }
        stmt.bindLong(4, entity.getSend_userId());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getPropTouchY());
        stmt.bindLong(7, entity.getPropTouchX());
        stmt.bindLong(8, entity.getGiftId());
 
        String giftMessage = entity.getGiftMessage();
        if (giftMessage != null) {
            stmt.bindString(9, giftMessage);
        }
 
        String send_avatar = entity.getSend_avatar();
        if (send_avatar != null) {
            stmt.bindString(10, send_avatar);
        }
 
        String send_nickName = entity.getSend_nickName();
        if (send_nickName != null) {
            stmt.bindString(11, send_nickName);
        }
        stmt.bindLong(12, entity.getChangeBackImageIndex());
        stmt.bindLong(13, entity.getReceive_userId());
        stmt.bindLong(14, entity.getPropId());
        stmt.bindLong(15, entity.getCallType());
 
        String receive_nickName = entity.getReceive_nickName();
        if (receive_nickName != null) {
            stmt.bindString(16, receive_nickName);
        }
 
        String propMessage = entity.getPropMessage();
        if (propMessage != null) {
            stmt.bindString(17, propMessage);
        }
        stmt.bindLong(18, entity.getGrabType());
        stmt.bindLong(19, entity.getAddfriendType());
 
        String receive_avatar = entity.getReceive_avatar();
        if (receive_avatar != null) {
            stmt.bindString(20, receive_avatar);
        }
        stmt.bindLong(21, entity.getIsRead());
        stmt.bindLong(22, entity.getIsEmbalmed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TouChuanOtherNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNoticeType());
 
        String drawingImage = entity.getDrawingImage();
        if (drawingImage != null) {
            stmt.bindString(3, drawingImage);
        }
        stmt.bindLong(4, entity.getSend_userId());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getPropTouchY());
        stmt.bindLong(7, entity.getPropTouchX());
        stmt.bindLong(8, entity.getGiftId());
 
        String giftMessage = entity.getGiftMessage();
        if (giftMessage != null) {
            stmt.bindString(9, giftMessage);
        }
 
        String send_avatar = entity.getSend_avatar();
        if (send_avatar != null) {
            stmt.bindString(10, send_avatar);
        }
 
        String send_nickName = entity.getSend_nickName();
        if (send_nickName != null) {
            stmt.bindString(11, send_nickName);
        }
        stmt.bindLong(12, entity.getChangeBackImageIndex());
        stmt.bindLong(13, entity.getReceive_userId());
        stmt.bindLong(14, entity.getPropId());
        stmt.bindLong(15, entity.getCallType());
 
        String receive_nickName = entity.getReceive_nickName();
        if (receive_nickName != null) {
            stmt.bindString(16, receive_nickName);
        }
 
        String propMessage = entity.getPropMessage();
        if (propMessage != null) {
            stmt.bindString(17, propMessage);
        }
        stmt.bindLong(18, entity.getGrabType());
        stmt.bindLong(19, entity.getAddfriendType());
 
        String receive_avatar = entity.getReceive_avatar();
        if (receive_avatar != null) {
            stmt.bindString(20, receive_avatar);
        }
        stmt.bindLong(21, entity.getIsRead());
        stmt.bindLong(22, entity.getIsEmbalmed() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TouChuanOtherNotice readEntity(Cursor cursor, int offset) {
        TouChuanOtherNotice entity = new TouChuanOtherNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // noticeType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // drawingImage
            cursor.getLong(offset + 3), // send_userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.getInt(offset + 5), // propTouchY
            cursor.getInt(offset + 6), // propTouchX
            cursor.getInt(offset + 7), // giftId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // giftMessage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // send_avatar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // send_nickName
            cursor.getInt(offset + 11), // changeBackImageIndex
            cursor.getLong(offset + 12), // receive_userId
            cursor.getInt(offset + 13), // propId
            cursor.getInt(offset + 14), // callType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // receive_nickName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // propMessage
            cursor.getInt(offset + 17), // grabType
            cursor.getInt(offset + 18), // addfriendType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // receive_avatar
            cursor.getInt(offset + 20), // isRead
            cursor.getShort(offset + 21) != 0 // isEmbalmed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TouChuanOtherNotice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoticeType(cursor.getInt(offset + 1));
        entity.setDrawingImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSend_userId(cursor.getLong(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPropTouchY(cursor.getInt(offset + 5));
        entity.setPropTouchX(cursor.getInt(offset + 6));
        entity.setGiftId(cursor.getInt(offset + 7));
        entity.setGiftMessage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSend_avatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSend_nickName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setChangeBackImageIndex(cursor.getInt(offset + 11));
        entity.setReceive_userId(cursor.getLong(offset + 12));
        entity.setPropId(cursor.getInt(offset + 13));
        entity.setCallType(cursor.getInt(offset + 14));
        entity.setReceive_nickName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPropMessage(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGrabType(cursor.getInt(offset + 17));
        entity.setAddfriendType(cursor.getInt(offset + 18));
        entity.setReceive_avatar(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsRead(cursor.getInt(offset + 20));
        entity.setIsEmbalmed(cursor.getShort(offset + 21) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TouChuanOtherNotice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TouChuanOtherNotice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TouChuanOtherNotice entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
